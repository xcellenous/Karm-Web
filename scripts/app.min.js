(function (window) {
	'use strict';
	
	var angular = window.angular;
	
	angular.module('karmapp.auth', []);
	
}(window));
(function (window) {
	'use strict';
	
	var angular = window.angular;
	
	angular.module('karmapp', ['ui.router',
							   'ngFacebook',
							   'react',
							   'karmapp.auth',
							   'parse-angular',
							   'parse-angular.enhance']);
	
}(window));
(function (window) {
	'use strict';
	
	window.settings = {
		Parse: {
			baseUrl: 'http://karm.parseapp.com/',
			appId: 'AmLmmeuMvRKdI1wCQQjzQZXNt0llS2RZTSKNuyKi',
			key: '40yQjOqsZl9kHYRFpTH8baeYbDXBVDblmQc0VQom'
		},
		Facebook: {
			appId: '767781983343464'
		}
	};
	
}(window));
(function (window) {
	'use strict';
	
	window.settings = {
		Parse: {
			baseUrl: '',
			appId: '',
			key: ''
		},
		Facebook: {
			appId: ''
		}
	};
	
}(window));
(function (window) {
	'use strict';
	
	var angular = window.angular,
		app = angular.module('karmapp.auth');
	
	function AuthService($rootScope, $q, $facebook) {
		var isInitialized = false,
			isLoggedIn = false,
			self = this;
		
		/**
			@memberof AuthService
			@description Bootstraps our Authentication service
			@private
		*/
		function bootstrapAuth() {
			function stateChangeHandler(event, toState, toParams) {
				if (toState.data.auth === true && isLoggedIn === false) {
					self.login().then(
						null,
						function (response) {
							event.preventDefault();
						}
					);
				}
			}
			$rootScope.$on('$stateChangeStart', stateChangeHandler);
		}
		
		/**
			@memberof AuthService
			@description If our AuthService hasn't been initialized
				yet, initialized it!
		*/
		this.initialize = function () {
			if (isInitialized === false) {
				bootstrapAuth();
			}
		};
		
		/**
			@memberof AuthService
			@description Log a user in using the Facebook SDK
		*/
		this.login = function () {
			var defer = $q.defer();
			
			$facebook.login().then(
				function (response) {
					if (response.status === "connected") {
						defer.resolve(response);
						isLoggedIn = true;
					} else {
						defer.reject(response);
					}
				},
				function (response) {
					defer.reject(response);
				}
			);
			
			return defer.promise;
		};
		
		/**
			@memberof AuthService
			@description Log a user out
		*/
		this.logout = function () {
			var defer = $q.defer();
			
			$facebook.logout().then(
				function (response) {
					defer.resolve(response);
					isLoggedIn = false;
				},
				function (response) {
					window.alert("Could not log you out :" + response.status);
					defer.reject(response);
				}
			);
			
			return defer.promise;
		};
		
		/**
			@memberof AuthService
			@description Checks if a user is logged in
		*/
		this.isLoggedIn = function () {
			return isLoggedIn;
		};
		
	}
	
	AuthService.$inject = [
		'$rootScope',
		'$q',
		'$facebook'
	];
	
	app.service('AuthService', AuthService);
	
}(window));
(function (window) {
	'use strict';
	
	var angular = window.angular,
		app = angular.module('karmapp');

	function AppCtrl($scope, $state, AuthService) {
		
		/**
			@memberof AppCtrl
			@description Is a user logged in to our application
		*/
		$scope.app.isLoggedIn = function () {
			return AuthService.isLoggedIn();
		};
		
		/**
			@memberof AppCtrl
			@description Log a user out
		*/
		$scope.app.logout = function () {
			AuthService.logout();
		};
		
	}
	
	AppCtrl.$inject = [
		'$scope',
		'$state',
		'AuthService'
	];
	
	app.controller('AppCtrl', AppCtrl);
	
}(window));
(function (window) {
	'use strict';
	
	var angular = window.angular,
		settings = window.settings,
		app = angular.module('karmapp');
	
	function config($stateProvider, $urlRouterProvider, $facebookProvider) {
		
		$facebookProvider.setAppId(settings.Facebook.appId);
		$facebookProvider.setPermissions("email,user_likes,public_profile,publish_actions");
		
		$stateProvider
		
			.state('app', {
				url: '/app',
				abstract: true,
				controller: 'AppCtrl',
				templateUrl: 'app/main/partials/app.html'
			})
		
			.state('app.home', {
				url: '/home',
				templateUrl: 'app/main/partials/home.html'
			})
		
			.state('app.user', {
				url: '/user',
				abstract: true,
				template: '<ui-view/>'
			})
			.state('app.user.login', {
				url: '/login',
				controller: 'UserLoginCtrl',
				templateUrl: 'app/user/partials/login.html'
			})
			.state('app.user.create', {
				url: '/create',
				controller: 'UserCreateCtrl',
				templateUrl: 'app/user/partials/create.html'
			})
			.state('app.user.dashboard', {
				url: '/dashboard',
				controller: 'UserDashboardCtrl',
				templateUrl: 'app/user/partials/dashboard.html',
				data: {
					auth: true
				}
			})
			.state('app.user.settings', {
				url: '/settings',
				controller: 'UserSettingsCtrl',
				templateUrl: 'app/user/partials/settings.html',
				data: {
					auth: true
				}
			})
			.state('app.user.viewAll', {
				url: '/viewAll',
				controller: 'UserViewAllCtrl',
				templateUrl: 'app/user/partials/viewAll.html'
			})
			.state('app.user.view', {
				url: '/view/:id',
				controller: 'UserViewCtrl',
				templateUrl: 'app/user/partials/view.html'
			})
		
			.state('app.issue', {
				url: '/issue',
				abstract: true,
				template: '<ui-view/>'
			})
			.state('app.issue.add', {
				url: '/add',
				controller: 'IssueAddCtrl',
				templateUrl: 'app/issue/partials/add.html',
				data: {
					auth: true
				}
			})
			.state('app.issue.viewAll', {
				url: '/viewAll',
				controller: 'IssueViewAllCtrl',
				templateUrl: 'app/issue/partials/viewAll.html'
			})
			.state('app.issue.view', {
				url: '/view/:id',
				controller: 'IssueViewCtrl',
				templateUrl: 'app/issue/partials/viewAll.html'
			});
		
		$urlRouterProvider.otherwise('/app/home');
		
	}
	
	config.$inject = [
		'$stateProvider',
		'$urlRouterProvider',
		'$facebookProvider'
	];
	
	app.config(config);
	
}(window));
(function (window) {
	'use strict';
	
	var angular = window.angular,
		app = angular.module('karmapp');
	
	/**
		@description Bootstraps our application by initializing the
			AuthService module to listen to state changes and check
			for correct (and incorrect) user permissions. It also
			initializes the Facebook SDK so that it can be used
			by ngFacebook.
	*/
	function run(AuthService) {
		AuthService.initialize();
		
		(function (d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) {
				return;
			}
			js = d.createElement(s);
			js.id = id;
			js.src = "//connect.facebook.net/en_US/sdk.js";
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));
	}
	
	run.$inject = [
		'AuthService'
	];
	
	app.run(run);
	
}(window));